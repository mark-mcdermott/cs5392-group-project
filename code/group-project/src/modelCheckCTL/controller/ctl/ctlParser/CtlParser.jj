options {
STATIC = false;
}

PARSER_BEGIN(CtlParser)
package modelCheckCTL.controller.ctl.ctlParser;

import java.util.Set;
import java.util.HashSet;
import modelCheckCTL.controller.ctl.ctlParser.ParseException;
import modelCheckCTL.model.ModelCheckInputs;
import modelCheckCTL.model.formulaObj.FormulaObj;
import static modelCheckCTL.controller.ctl.CtlUtils.statesWithLabel;
import static modelCheckCTL.controller.ctl.CtlUtils.union;
import static modelCheckCTL.controller.ctl.CtlUtils.intersection;
import static modelCheckCTL.controller.ctl.CtlUtils.subtract;
import modelCheckCTL.model.kripke.Kripke;

/* clt parser rules approach from https://github.com/pedrogongora/antelope/blob/master/AntelopeCore/src/antelope/ctl/parser/CTLParser.jj, accessed 9/20 */
public class CtlParser {
    Kripke kripke;
    String model;

    public CtlParser(ModelCheckInputs modelCheckInputs) {
	  this(modelCheckInputs.getStream(), null); // dunno what this call does exactly, but it's needed to avoid JavaCC throwing a null error. Compare to the autogenerated constructor in CtlValidator.java line 168
	  this.kripke = modelCheckInputs.getKripke();
	  this.model = modelCheckInputs.getCtlFormula();
    }

    public static Set or(Set a, Set b) {
        return union(a,b);
    }

    public static Set and(Set a, Set b) {
        return intersection(a,b);
    }

    public static Set not(Set states, Set a) {
        return subtract(states,a);
    }

}

PARSER_END(CtlParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
      <NOT: "not">
    | <AND: "and">
    | <OR: "or">
    | <IMPLIES: "->">
    | <AX: "AX">
    | <AF: "AF">
    | <AG: "AG">
    | <EX: "EX">
    | <EF: "EF">
    | <EG: "EG">
    | <A: "A">
    | <E: "E">
    | <U: "U">
    | <LPAREN: "(">
    | <RPAREN: ")">
    | <ATOM: ["a"-"z"](["0"-"9"])*>
}

/** Root production. */
Set Parse():
{
    Set f;
}

{
    f = formula(kripke.getStates()) <EOF>
    { return f; }
}

Set formula(Set states):
{
    Set e;
    Set b = null;
}
{
    e = expression(states) [ b = binaryPredicate(e,states) ]
    {
        if (b != null) { return b; }
        else { return e; }
    }
}

Set expression(Set states):
{
 Token t;
 Set f;
}
{
        t = <ATOM>
        {
            Set statesWithLabels = statesWithLabel(states, t);
            // System.out.println(statesWithLabels);
            return statesWithLabels;
        }
    |   <NOT> f = formula(states)
        {
            return not(states,f);
        }
    |   <LPAREN> f = formula(states) <RPAREN>
        { return f; }
    |   f = temporalExpression(states)
        { return f; }
}

Set binaryPredicate(Set subject, Set states):
{ Set predicate; }
{
        <AND> predicate = formula(states)
        { return and(subject,predicate); }
    |   <OR> predicate = formula(states)
        { return or(subject,predicate); }
    |   <IMPLIES> predicate = formula(subject)
        {
            /* TODO: need to test this implies out a bunch - no idea if it's working right */
            return or(not(states,subject),predicate);  /* (not subject or predicate) */
        }
}

Set temporalExpression(Set s):
{ Set f; }
{
      /* TODO: these algos are on p. 227 of pdf of textbook */
      <AX> f = formula(s)
      { return f; /* TODO: finish this stub */ }
    | <AF> f = formula(s)
      { return f; /* TODO: finish this stub */ }
    | <AG> f = formula(s)
      { return f; /* TODO: finish this stub */ }
    | <EX> f = formula(s)
      { return f; /* TODO: finish this stub */ }
    | <EF> f = formula(s)
      { return f; /* TODO: finish this stub */ }
    | <EG> f = formula(s)
      { return f; /* TODO: finish this stub */ }
    | <A> <LPAREN> f = formula(s) <U> f = formula(s) <RPAREN>
      { return f; /* TODO: finish this stub */ }
    | <E> <LPAREN> f = formula(s) <U> f = formula(s) <RPAREN>
      { return f; /* TODO: finish this stub */ }
}